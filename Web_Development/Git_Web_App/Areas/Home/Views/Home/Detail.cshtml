@using AustinsFirstProject.Git_Web_App.Classes;
@using Newtonsoft.Json;

@model AustinsFirstProject.Git_Web_App.Model.Git_Url_Basic_Info;
@{
    ViewData["Title"] = "Detail";
    Layout = "~/Views/Static/Layout.cshtml";
    Git_Commit Active_Git_Commit = new Git_Commit();
    Html.Hidden("active_git", new Git_Commit());
}

<div class="container-fluid padding-off fill">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item myItem">
            <a class="nav-link active myLink" data-toggle="tab" href="#commits" role="tab" aria-controls="home">History</a>
        </li>
        <li class="nav-item myItem">
            <a class="nav-link myLink" data-toggle="tab" href="#test" role="tab" aria-controls="profile">Test</a>
        </li>
    </ul>

    <div class="tab-content fill border">
        <div class="tab-pane active fill" id="commits" role="tabpanel">
            <div id="history" class="row fill">
                <div class="container-fluid fill">
                    <div class="row fill">
                        <div class="col-2 fill">
                            <div class="container pre-scrollable fill">
                                <div class="list-group" id="myTab_2" role="tablist">
                                    @{  var counter = 0;
                                        foreach (var item in Model.Git_Commits.Git__Commits)
                                        {
                                            <button type="button" class="list-group-item" id="commit_@counter" data-toggle="tab" onclick="Get_Active_Git_Commit('commit_' + @counter, @JsonConvert.SerializeObject(@item))" role="tab" aria-controls="commit_detail_@counter"><p>@item.MessageShort</p>
                                    @*<p class="font-weight-bold">@item.MessageShort</p>*@
                                                        @*<p>@item.Author.Name committed on @item.Author.When</p>*@
                                                </button>
                                            counter++;
                                        }
                                    }
                                 </div>
                            </div>
                        </div>

                        <div class="col">
                            <div class="container-fluid padding-off fill">
                                <div class="row fill">
                                    <div class="container-fluid padding-off fill-20">
                                        <p>
                                            <h4 id="commit_message"></h4>
                                            <span id="committed_by"></span>
                                        </p>
                                    </div>
                                    <div class="container-fluid padding-off fill-80">
                                        <div class="row fill">
                                            <div class="col-2">
                                                <div class="container" id="files_n_status"></div>
                                            </div>
                                            <div class="col">
                                                <div class="container-fluid fill" id="commit_patch"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fill" id="test" role="tabpanel">
            <div id="name" class="row">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-2">
                            <div class="container">
                                @foreach (var item in Model.Git_Commits.Git__Commits)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <p>@item.Author.Name</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-8">
                            <div class="container bg-secondary">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $('#myTab .myItem .myLink').click(function (e) {
        $('#myTab .myItem a.active').removeClass('active');
        if (!$(this).hasClass('active')) {
            $(this).addClass('active');
        }
        e.preventDefault();
    });

    function Git_File_Clicked(element_id) {
        var element = '#git_file' + element_id;
        $('#git_files a.active').removeClass('active');
        if (!$(element).hasClass('active')) {
            $(element).addClass('active');
        }

        element = '#commit_patch_' + element_id;
        $('#commit_patch div.active').removeClass('active');
        if (!$(element).hasClass('active')) {
            $(element).addClass('active');
        }
    }
    String.prototype.insertAt = function (index, insert) {
        return this.substr(0, index) + insert + this.substr(index, this.length);
    }
    String.prototype.replaceAt = function (index, replacement) {
        //console.log('replaceAt');
        //console.log(this);
        //console.log(index);
        //console.log(replacement);
        //console.log(this.substr(0, index) + replacement + this.substr(index, this.length));
        return this.substr(0, index) + replacement + this.substr(index + 1, this.length);
    }

    function htmlEntities(str) {
        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }

    function red_blue_bg(str) {
        var match;
        var match_check;
        
        do {
            match = str.indexOf('[here]+');
            if (match >= 0) {
                match_check = true;
                str = str.replace('[here]+', '<br \\><span style="background-color:#b9f6ca;">+');
                str = str.insertAt(str.indexOf('[here]', match+1), '</span>');
            } else { match_check = false; }
        } while (match_check);

        index_start = 0;
        do {
            match = str.indexOf('[here]-');
            if (match >= 0) {
                match_check = true;
                str = str.replace('[here]-', '<br \\><span style="background-color:#ff8a80;">-');
                str = str.insertAt(str.indexOf('[here]', match + 1), '</span>');
            } else { match_check = false; }
        } while (match_check);

        do {
            match = str.indexOf('[here]');
            if (match >= 0) {
                match_check = true;
                str = str.replace('[here]', '<br \\>');
            } else { match_check = false; }
        } while (match_check);
                
        return str;
    }

    function Get_Active_Git_Commit(element_id, commit) {
        element_id = '#' + element_id;

        $('#myTab_2 button.active').removeClass('active');

        if (!$(element_id).hasClass('active')) {
            $(element_id).addClass("active");
        }

        commit = JSON.stringify(commit);

        //$.get("/Company/GetMessage", function (data) {
        //    $("p").html(data);
        //});
        $.post("/Home/Get_Active_Git_Commit", { commit: commit })
            .fail(function (error) {
                console.log('Error');
                console.log(error);
            })
            .done(function (result) {
                result = JSON.parse(result);

                $('#commit_message')[0].textContent = result.Message;

                $('#committed_by')[0].textContent = 'Committed By: ' + result.Author.Name + ' (' + result.Author.Email + ') on ' + result.Author.When;

                var table = '<div class="list-group" role="tablist" id="git_files">';
                var commit_patch = '<div class="tab-content fill" id="nav-tabContent">';

                var git_changes = result.Git_File_Changes;
                for (var a = 0; a < git_changes.length; a++)
                {
                    var git_changes_json = git_changes[a];

                    if (git_changes_json.File_FullName.length > 2) {
                        table += '<a href="#commit_patch_' + a + '" class="list-group-item list-group-item-action text-truncate" id="git_file' + a + '" onclick="Git_File_Clicked(\'' + a + '\')"><p>' + git_changes_json.File_Name + '<p>';
                        if (git_changes_json.File_Status === 0) {
                            table += '<span class="badge badge-success">Added</span>';
                        } else if (git_changes_json.File_Status === 1) {
                            table += '<span class="badge badge-warning">Modified</span>';
                        } else if (git_changes_json.File_Status === 2) {
                            table += '<span class="badge badge-info">Renamed</span>';
                        } else if (git_changes_json.File_Status === 3) {
                            table += '<span class="badge badge-danger">Deleted</span>';
                        } else {
                            table += '<span class="badge badge-dark">Unknown</span>';
                        }
                        table += '</p></p></a>';

                        git_changes_json.Patch = htmlEntities(git_changes_json.Patch);
                        var match;
                        var match_check;
                        
                        do {
                            match = /\r|\n/.exec(git_changes_json.Patch);
                            if (match) {
                                // console.log("Found line break at index " + match.index);
                                match_check = true;
                                git_changes_json.Patch = git_changes_json.Patch.replaceAt(match.index, '[here]')
                            } else { match_check = false; }
                        } while (match_check);

                        git_changes_json.Patch = red_blue_bg(git_changes_json.Patch);

                        commit_patch += '<div class="tab-pane fill fade show card" id="commit_patch_' + a + '" role="tabpanel"><div class="card-header">' + git_changes_json.File_FullName + '</div><div class="card-body fill pre-scrollable"><p class="card-text">' + git_changes_json.Patch + '</p></div></div>';                        
                    }
                }
                table += '</div>';
                commit_patch += '</div>';

                $('#files_n_status').empty();
                $('#files_n_status')[0].innerHTML = table;

                $('#commit_patch').empty();
                $('#commit_patch')[0].innerHTML = commit_patch;



                //
                //JSON.parse(JSON.stringify(result.Git_File_Changes), (key, value) => {

                //    console.log('Key: ' + key);
                //    console.log('Value');
                //    console.log(value);

                //    var str = JSON.stringify(key);

                //});


                //$('#commit_patch')[0].textContent = result.Patch;
            });
    }
</script>



    
